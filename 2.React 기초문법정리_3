1. 컴포넌트 매핑

   * 컴포넌트 매핑을 배우기 전 알아야할 내용 정리
   
     Map() : 파라미터로 전달된 함수를 통해서 배열내의 각 요소를 처리하여 그 결과로 새로운 배열을 생성
             (데이터 배열을 React 에서 렌더링할때 javascript 의 Map을 사용)
     [형식]
     배열명.map(callback,[thisArg]);
     
     - callback : 새로운 배열의 요소를 생성하는 함수로, 세가지 인수를 가짐
       
             currentValue : 현재 처리되고 있는 요소
             index : 현재 처리되고 있는 요소의 index 값
             array : 메소드가 불려진 배열 
     - thisArg(선택항목) : callback 함수 내부에서 사용할 this 값을 설정
    
    [예시]  var number = [1,2,3,4,5];
           
            var processed = number.map(fucntion(num){
	            	return num*num ;
            });
            
           출력값 => [1,4,9,16,25]
          
            /*위의 코드를 ES6 Syntax 로*/
            let numbers = [1,2,3,4,5];
           
            //arrow function형식 
            //(..) => {....} 

            let result = numbers.map((num) => {
            	return num * num ;
            });
   
            출력값 => [1,4,9,16,25]
     
      arrow function 활용 예제 (ES6 - ES5 변환)
      
      [예시1]

       //ES6 
       let one = a => console.log(a);

       //ES5
       var one = function one(a) {
	                  return console.log(a);
                 };
       
       [예시2]
       
       //ES6 
       let two = (a,b) => console.log(a,b);

       //ES5
       var two = function two(a, b) {
	                  return console.log(a, b);
                 };
      [예시3]
       
       //ES6 
       //함수가 여러개일때는 {}사용
       let three = (c,d) => {
          console.log(c);
          console.log(d);
       }
     
       //ES5
       var three = function three(c, d) {
	        console.log(c);
	        console.log(d);
       };
       
      [예시4]
      
      //ES6 
      //넘기는 값이 없어도 사용가능
      let four = () => {
	        console.log("no params");
      }
     
      //ES5
      var four = function four() {
	        console.log("no params");
      };
      
 - 컴포넌트로 배열을 매핑할수도 있음
 
   *const : ES6 문법으로 프로그램을 실행할때 변하지 않을 값을 지정하는 상수
 
   [예시]    //출력될 class 
            class ContactInfo extends React.Component{
              render(){
                  return(
                    <div>{this.props.contact.name}  {this.props.contact.phone}</div>
                  )
               }
             }
             
             class Contact extends React.Component{
                //state 생성
   		          constructor(props){
                  super(props);
                  //배열 값인 state 초기값 세팅
                  this.state={
                    contactData:[
                       {name:'Abet1',phone:'010-0000-00001'},                          
                       {name:'Abet2',phone:'010-0000-00002'},
                       {name:'Abet3',phone:'010-0000-00003'},                           
                       {name:'Abet4',phone:'010-0000-00004'}
                     ]
                    }
                  }
                  
                  render(){
                   //mapToComponent의 값이 변하지 않는 상수에 배열값 세팅 
                   const mapToComponent = (data)=>{
	                     //배열의 값과 배열의 index 값 뿌려줌
                       // key는 데이터의 고유값 
                       return data.map((contact,i)=>{
                           return (<ContactInfo contact = {contact} key={i}/>);
                        });
                    };
                
                   return(
                      <div>
                         {mapToComponent(this.state.contactData)}
                      </div>
                    );
                 }
                 
               class App extends React.Component {
  		            render() {
    		              return (
                        <Contact/>
                      );
                   }
                };
     
               ReactDOM.render(<App></App>,document.getElementById("ElementId 값")); 
        
